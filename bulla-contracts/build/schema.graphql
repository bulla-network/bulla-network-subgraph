enum ClaimType {
  INVOICE
  PAYMENT
}

enum ClaimStatus {
  PENDING
  PAID
  REJECTED
  RESCINDED
  REPAYING
}
# it seems like these 3 interfaces are redundant, but it is a way to infer the filtering of derived events.
# it is also a result of unions not being supported in the Graph's version of graphQL

# base event log with event metadata
interface EventLog {
  eventName: String!
  blockNumber: BigInt!
  transactionHash: Bytes!
  timestamp: BigInt!
}

interface ClaimEvent {
  tokenId: Claim!
  eventName: String!
  blockNumber: BigInt!
  transactionHash: Bytes!
  timestamp: BigInt!
}

interface ClaimActionEvent {
  tokenId: Claim!
  eventName: String!
  blockNumber: BigInt!
  transactionHash: Bytes!
  timestamp: BigInt!
}

## BEGIN EVENTS:
type TransferEvent implements ClaimEvent & EventLog @entity {
  id: ID! #Transfer-TOKENID-TRANSACTION_HASH
  from: Bytes! #address
  to: Bytes! #address
  tokenId: Claim!
  eventName: String!
  blockNumber: BigInt!
  transactionHash: Bytes!
  timestamp: BigInt!
}

type BullaTagUpdatedEvent implements ClaimEvent & EventLog @entity {
  id: ID! #BullaTagUpdated-TOKENID-TRANSACTION_HASH
  bullaManager: Bytes! #address
  tokenId: Claim!
  updatedBy: Bytes! #address
  tag: String!
  eventName: String!
  blockNumber: BigInt!
  transactionHash: Bytes!
  timestamp: BigInt!
}

type FeePaidEvent implements ClaimEvent & EventLog @entity {
  id: ID! #FeePaid-TOKENID-TRANSACTION_HASH
  bullaManager: Bytes! #address
  tokenId: Claim!
  collectionAddress: Bytes! #address
  paymentAmount: BigInt!
  transactionFee: BigInt!
  eventName: String!
  blockNumber: BigInt!
  transactionHash: Bytes!
  timestamp: BigInt!
}

type ClaimRejectedEvent implements ClaimEvent & EventLog & ClaimActionEvent @entity {
  id: ID! #ClaimRejected-TOKENID-TRANSACTION_HASH
  managerAddress: Bytes! #address TODO: normalize this to bullaManager in v2
  tokenId: Claim!
  eventName: String!
  blockNumber: BigInt!
  transactionHash: Bytes!
  timestamp: BigInt!
}

type ClaimRescindedEvent implements ClaimEvent & EventLog & ClaimActionEvent @entity {
  id: ID! #ClaimRescinded-TOKENID-TRANSACTION_HASH
  bullaManager: Bytes! #address
  tokenId: Claim!
  eventName: String!
  blockNumber: BigInt!
  transactionHash: Bytes!
  timestamp: BigInt!
}

type ClaimPaymentEvent implements ClaimEvent & EventLog & ClaimActionEvent @entity {
  id: ID! #ClaimPayment-TOKENID-TRANSACTION_HASH
  bullaManager: Bytes! #address
  tokenId: Claim!
  debtor: Bytes! #address
  paidBy: Bytes! #address
  paymentAmount: BigInt!
  eventName: String!
  blockNumber: BigInt!
  transactionHash: Bytes!
  timestamp: BigInt!
}

type ClaimCreatedEvent implements ClaimEvent & EventLog @entity {
  id: ID!
  tokenId: Claim!
  bullaManager: Bytes! #address
  parent: Bytes! #address TODO: change this?
  creator: Bytes! #address
  debtor: Bytes! #address
  creditor: Bytes! #address
  claimToken: Token! #address
  description: String!
  ipfsHash: String
  amount: BigInt!
  dueBy: BigInt!
  eventName: String!
  blockNumber: BigInt!
  transactionHash: Bytes!
  timestamp: BigInt!
}

type BullaManagerSetEvent implements EventLog @entity {
  id: ID!
  prevBullaManager: Bytes! #address
  newBullaManager: Bytes! #address
  eventName: String!
  blockNumber: BigInt!
  transactionHash: Bytes!
  timestamp: BigInt!
}

type BullaBankerCreatedEvent implements EventLog @entity {
  id: ID!
  bullaManager: Bytes! #address
  bullaClaimERC721: Bytes! #address
  bullaBanker: Bytes! #address
  eventName: String!
  blockNumber: BigInt!
  transactionHash: Bytes!
  timestamp: BigInt!
}

##END EVENTS ^^^

type AccountTag @entity {
  id: ID! #TOKENID-USER_ADDRESS
  tokenId: Claim!
  userAddress: Bytes! #address
  tag: String!
}

type Claim @entity {
  id: ID!
  tokenId: String!
  logs: [ClaimEvent!]! @derivedFrom(field: "tokenId")
  accountTag: [AccountTag!]! @derivedFrom(field: "tokenId")
  ipfsHash: String
  creator: Bytes! # address
  creditor: Bytes! # address
  debtor: Bytes! # address
  amount: BigInt!
  paidAmount: BigInt!
  isTransferred: Boolean!
  description: String!
  created: BigInt!
  dueBy: BigInt!
  claimType: ClaimType!
  token: Token!
  status: ClaimStatus!
  transactionHash: Bytes!
  claimActions: [ClaimActionEvent!]! @derivedFrom(field: "tokenId")
}

type Token @entity {
  id: ID!
  address: Bytes! #address
  decimals: Int!
  symbol: String!
  network: String!
  isNative: Boolean!
}

type User @entity {
  id: ID!
  address: Bytes! #address
  claims: [Claim!]!
}

type BullaManager @entity {
  id: ID!
  address: Bytes! #address
  owner: Bytes! #address
  description: String!
  bullaToken: Token
  feeCollectionAddress: User!
  feeBasisPoints: Int!
  reducedFeeBasisPoints: Int
  bullaTokenThreshold: Int #the amount of tokens to get a reduced fee
  lastUpdatedBlockNumber: BigInt!
  lastUpdatedTimestamp: BigInt!
}

# 1 config object for each safe using bullaBanker
type BullaBankerGnosisModuleConfig @entity {
  id: ID! #GnosisSafe:SAFE_ADDRESS-ModuleConfig
  moduleAddress: Bytes! #address
  safeAddress: User! #address
  version: String!
  installationTimestamp: BigInt!
}
