enum ClaimType {
  Invoice
  Payment
}

enum ClaimStatus {
  Pending
  Paid
  Rejected
  Rescinded
  Repaying
}
# it seems like these 3 interfaces are redundant, but it is a way to infer the filtering of derived events.
# it is also a result of unions not being supported in the Graph's version of graphQL

# base event log with event metadata
interface IEventLog {
  id: ID!
  eventName: String!
  blockNumber: BigInt!
  transactionHash: Bytes!
  logIndex: BigInt!
  timestamp: BigInt!
}

interface IInstantPaymentEvent {
  id: ID!
  instantPayment: InstantPayment!
  eventName: String!
  blockNumber: BigInt!
  transactionHash: Bytes!
  logIndex: BigInt!
  timestamp: BigInt!
}

interface IClaimEvent {
  id: ID!
  claim: Claim!
  eventName: String!
  blockNumber: BigInt!
  transactionHash: Bytes!
  logIndex: BigInt!
  timestamp: BigInt!
}

## BEGIN EVENTS:
type TransferEvent implements IClaimEvent & IEventLog @entity {
  id: ID! #Transfer-TOKENID-TRANSACTION_HASH-LOG_INDEX
  from: Bytes! #address
  to: Bytes! #address
  tokenId: String!
  claim: Claim!
  eventName: String!
  blockNumber: BigInt!
  transactionHash: Bytes!
  logIndex: BigInt!
  timestamp: BigInt!
}

type BullaTagUpdatedEvent implements IClaimEvent & IEventLog @entity {
  id: ID! #BullaTagUpdated-TOKENID-TRANSACTION_HASH-LOG_INDEX
  bullaManager: Bytes! #address
  claim: Claim!
  updatedBy: Bytes! #address
  tag: String!
  eventName: String!
  blockNumber: BigInt!
  transactionHash: Bytes!
  logIndex: BigInt!
  timestamp: BigInt!
}

type FeePaidEvent implements IClaimEvent & IEventLog @entity {
  id: ID! #FeePaid-TOKENID-TRANSACTION_HASH-LOG_INDEX
  bullaManager: Bytes! #address
  claim: Claim!
  collectionAddress: Bytes! #address
  paymentAmount: BigInt!
  transactionFee: BigInt!
  eventName: String!
  blockNumber: BigInt!
  transactionHash: Bytes!
  logIndex: BigInt!
  timestamp: BigInt!
}

type ClaimRejectedEvent implements IClaimEvent & IEventLog @entity {
  id: ID! #ClaimRejected-TOKENID-TRANSACTION_HASH-LOG_INDEX
  managerAddress: Bytes! #address TODO: normalize this to bullaManager in v2
  claim: Claim!
  eventName: String!
  blockNumber: BigInt!
  transactionHash: Bytes!
  logIndex: BigInt!
  timestamp: BigInt!
}

type ClaimRescindedEvent implements IClaimEvent & IEventLog @entity {
  id: ID! #ClaimRescinded-TOKENID-TRANSACTION_HASH-LOG_INDEX
  bullaManager: Bytes! #address
  claim: Claim!
  eventName: String!
  blockNumber: BigInt!
  transactionHash: Bytes!
  logIndex: BigInt!
  timestamp: BigInt!
}

type ClaimPaymentEvent implements IClaimEvent & IEventLog @entity {
  id: ID! #ClaimPayment-TOKENID-TRANSACTION_HASH-LOG_INDEX
  bullaManager: Bytes! #address
  claim: Claim!
  debtor: Bytes! #address
  paidBy: Bytes! #address
  paymentAmount: BigInt!
  eventName: String!
  blockNumber: BigInt!
  transactionHash: Bytes!
  logIndex: BigInt!
  timestamp: BigInt!
}

type ClaimCreatedEvent implements IClaimEvent & IEventLog @entity {
  id: ID!
  claim: Claim!
  bullaManager: Bytes! #address
  parent: Bytes! #address TODO: change this?
  creator: Bytes! #address
  debtor: Bytes! #address
  creditor: Bytes! #address
  claimToken: Token! #address
  description: String!
  ipfsHash: String
  amount: BigInt!
  dueBy: BigInt!
  eventName: String!
  blockNumber: BigInt!
  transactionHash: Bytes!
  logIndex: BigInt!
  timestamp: BigInt!
}

type FinancingOfferedEvent implements IEventLog @entity {
  id: ID!
  originatingClaimId: Claim!
  minDownPaymentBPS: Int!
  interestBPS: Int!
  termLength: BigInt!
  eventName: String!
  blockNumber: BigInt!
  transactionHash: Bytes!
  logIndex: BigInt!
  timestamp: BigInt!
}

type FinancingAcceptedEvent implements IEventLog @entity {
  id: ID!
  originatingClaimId: Claim!
  financedClaimId: Claim!
  eventName: String!
  blockNumber: BigInt!
  transactionHash: Bytes!
  logIndex: BigInt!
  timestamp: BigInt!
}

interface IPoolTransaction {
  poolAddress: Bytes! # address
  priceAfterTransaction: BigInt!
}

type InvoiceFundedEvent implements IEventLog & IPoolTransaction @entity {
  id: ID!
  invoiceId: String!
  fundedAmount: BigInt!
  upfrontBps: Int!
  targetInterest: BigInt!
  targetProtocolFee: BigInt!
  targetAdminFee: BigInt!
  targetTax: BigInt!
  originalCreditor: Bytes! #address
  eventName: String!
  blockNumber: BigInt!
  transactionHash: Bytes!
  logIndex: BigInt!
  timestamp: BigInt!
  poolAddress: Bytes!
  priceAfterTransaction: BigInt!
  claim: Claim!
}

type InvoiceKickbackAmountSentEvent implements IEventLog & IPoolTransaction @entity {
  id: ID!
  invoiceId: String!
  kickbackAmount: BigInt!
  originalCreditor: Bytes! #address
  eventName: String!
  blockNumber: BigInt!
  transactionHash: Bytes!
  logIndex: BigInt!
  timestamp: BigInt!
  poolAddress: Bytes!
  priceAfterTransaction: BigInt!
  claim: Claim!
}

type InvoiceUnfactoredEvent implements IEventLog & IPoolTransaction @entity {
  id: ID!
  invoiceId: String!
  originalCreditor: Bytes! #address
  eventName: String!
  totalRefundAmount: BigInt!
  interestToCharge: BigInt!
  trueInterest: BigInt!
  trueProtocolFee: BigInt!
  trueAdminFee: BigInt!
  trueTax: BigInt!
  blockNumber: BigInt!
  transactionHash: Bytes!
  logIndex: BigInt!
  timestamp: BigInt!
  poolAddress: Bytes!
  priceAfterTransaction: BigInt!
  claim: Claim!
}

type InvoiceImpairedEvent implements IEventLog & IPoolTransaction @entity {
  id: ID!
  invoiceId: String!
  eventName: String!
  fundedAmount: BigInt!
  impairAmount: BigInt!
  blockNumber: BigInt!
  transactionHash: Bytes!
  logIndex: BigInt!
  timestamp: BigInt!
  poolAddress: Bytes!
  priceAfterTransaction: BigInt!
  claim: Claim!
}

type DepositMadeEvent implements IEventLog & IPoolTransaction @entity {
  id: ID!
  depositor: Bytes! #address
  assets: BigInt!
  sharesIssued: BigInt!
  poolAddress: Bytes! #address
  eventName: String!
  blockNumber: BigInt!
  transactionHash: Bytes!
  logIndex: BigInt!
  timestamp: BigInt!
  priceAfterTransaction: BigInt!
  ipfsHash: String # nullable attachment property
}

type SharesRedeemedEvent implements IEventLog & IPoolTransaction @entity {
  id: ID!
  redeemer: Bytes! #address
  assets: BigInt!
  shares: BigInt!
  poolAddress: Bytes! #address
  eventName: String!
  blockNumber: BigInt!
  transactionHash: Bytes!
  logIndex: BigInt!
  timestamp: BigInt!
  priceAfterTransaction: BigInt!
  ipfsHash: String # nullable attachment property
}

type InvoiceReconciledEvent implements IEventLog & IPoolTransaction @entity {
  id: ID!
  invoiceId: String!
  trueInterest: BigInt!
  trueProtocolFee: BigInt!
  trueAdminFee: BigInt!
  trueTax: BigInt!
  poolAddress: Bytes! #address
  eventName: String!
  blockNumber: BigInt!
  transactionHash: Bytes!
  logIndex: BigInt!
  timestamp: BigInt!
  priceAfterTransaction: BigInt!
  claim: Claim!
}

type OrderERC20 @entity {
  id: ID! # orderId
  orderId: BigInt!
  expiry: BigInt!
  signerWallet: Bytes! #address
  signerToken: Token! #address
  signerAmount: BigInt!
  senderWallet: Bytes! #address
  senderToken: Token! #address
  senderAmount: BigInt!
}

type OrderCreatedEvent implements IEventLog @entity {
  id: ID!
  order: OrderERC20!
  sender: Bytes! #address
  signerWallet: Bytes! #address
  eventName: String!
  blockNumber: BigInt!
  transactionHash: Bytes!
  logIndex: BigInt!
  timestamp: BigInt!
}

type OrderExecutedEvent implements IEventLog @entity {
  id: ID!
  order: OrderERC20!
  sender: Bytes! #address
  signerWallet: Bytes! #address
  eventName: String!
  blockNumber: BigInt!
  transactionHash: Bytes!
  logIndex: BigInt!
  timestamp: BigInt!
}

type OrderDeletedEvent implements IEventLog @entity {
  id: ID!
  order: OrderERC20!
  signerWallet: Bytes! #address
  eventName: String!
  blockNumber: BigInt!
  transactionHash: Bytes!
  logIndex: BigInt!
  timestamp: BigInt!
}

type LoanOfferedEvent implements IEventLog @entity {
  id: ID!
  loanId: String!
  offeredBy: Bytes! #address
  interestBPS: Int!
  termLength: BigInt!
  loanAmount: BigInt!
  creditor: Bytes! #address
  debtor: Bytes! #address
  description: String
  claimToken: Token! #address
  ipfsHash: String
  eventName: String!
  blockNumber: BigInt!
  transactionHash: Bytes!
  logIndex: BigInt!
  timestamp: BigInt!
}

type LoanOfferAcceptedEvent implements IEventLog @entity {
  id: ID!
  loanId: String!
  claimId: Claim!
  eventName: String!
  blockNumber: BigInt!
  transactionHash: Bytes!
  logIndex: BigInt!
  timestamp: BigInt!
}

type LoanOfferRejectedEvent implements IEventLog @entity {
  id: ID!
  loanId: String!
  rejectedBy: Bytes! #address`
  eventName: String!
  blockNumber: BigInt!
  transactionHash: Bytes!
  logIndex: BigInt!
  timestamp: BigInt!
}

type BullaManagerSetEvent implements IEventLog @entity {
  id: ID!
  prevBullaManager: Bytes! #address
  newBullaManager: Bytes! #address
  eventName: String!
  blockNumber: BigInt!
  transactionHash: Bytes!
  logIndex: BigInt!
  timestamp: BigInt!
}

type BullaBankerCreatedEvent implements IEventLog @entity {
  id: ID!
  bullaManager: Bytes! #address
  bullaClaimERC721: Bytes! #address
  bullaBanker: Bytes! #address
  eventName: String!
  blockNumber: BigInt!
  transactionHash: Bytes!
  logIndex: BigInt!
  timestamp: BigInt!
}

type InstantPaymentEvent implements IEventLog & IInstantPaymentEvent @entity {
  id: ID! #keccak256(string(transactionHash + logIndex))
  instantPayment: InstantPayment!
  from: User! #address
  to: User! #address
  amount: BigInt!
  token: Token!
  description: String!
  tag: String!
  ipfsHash: String
  eventName: String!
  blockNumber: BigInt!
  transactionHash: Bytes!
  logIndex: BigInt!
  timestamp: BigInt!
}

type InstantPaymentTagUpdatedEvent implements IEventLog & IInstantPaymentEvent @entity {
  id: ID! #keccak256(string(transactionHash + logIndex))
  instantPayment: InstantPayment!
  updatedBy: User! #address
  tag: String! #address
  eventName: String!
  blockNumber: BigInt!
  transactionHash: Bytes!
  logIndex: BigInt!
  timestamp: BigInt!
}

##END EVENTS ^^^

type AccountTag @entity {
  id: ID! #TOKENID-USER_ADDRESS
  claim: Claim!
  userAddress: Bytes! #address
  tag: String!
}

type InstantPayment @entity {
  id: ID! #keccak256(string(transactionHash + logIndex))
  from: User!
  to: User!
  amount: BigInt!
  token: Token!
  ipfsHash: String
  description: String!
  tag: [InstantPaymentTag!]! @derivedFrom(field: "instantPayment")
  logs: [IInstantPaymentEvent!]! @derivedFrom(field: "instantPayment")
}

type InstantPaymentTag @entity {
  id: ID! #keccak256(string(transactionHash + logIndex))
  instantPayment: InstantPayment!
  updatedBy: User! #address
  tag: String!
}

type Claim @entity {
  id: ID! #ClaimCreatedEvent-TOKENID-TX_HASH-LOG_INDEX
  tokenId: String!
  logs: [IClaimEvent!]! @derivedFrom(field: "claim")
  accountTag: [AccountTag!]! @derivedFrom(field: "claim")
  ipfsHash: String
  creator: User! # address
  creditor: User! # address
  debtor: User! # address
  amount: BigInt!
  paidAmount: BigInt!
  isTransferred: Boolean!
  description: String!
  created: BigInt!
  dueBy: BigInt!
  claimType: ClaimType!
  token: Token!
  status: ClaimStatus!
  transactionHash: Bytes!
  bullaClaimAddress: Bytes! #address
  lastUpdatedBlockNumber: BigInt!
  lastUpdatedTimestamp: BigInt!
}

type Token @entity {
  id: ID! # id is the lowercased tokenAddress
  address: Bytes! #address
  decimals: Int!
  symbol: String!
  network: String!
  isNative: Boolean!
}

type User @entity {
  id: ID!
  address: Bytes! #address
  claims: [Claim!]!
  instantPayments: [InstantPayment!]!
  financeEvents: [IEventLog!]!
  frendLendEvents: [IEventLog!]!
  factoringEvents: [IEventLog!]!
  swapEvents: [IEventLog!]!
}

type PoolPnl @entity {
  id: ID!
  address: Bytes! #address
  pnlHistory: [PnlHistoryEntry!]!
}

type PnlHistoryEntry @entity {
  id: ID!
  pnl: BigInt!
  timestamp: BigInt!
}

type FactoringPricePerShare @entity {
  id: ID!
  address: Bytes! # address
  priceHistory: [PriceHistoryEntry!]!
}

type PriceHistoryEntry @entity {
  id: ID!
  timestamp: BigInt!
  price: BigInt!
}

type HistoricalFactoringStatistics @entity {
  id: ID!
  address: Bytes! #address
  statistics: [FactoringStatisticsEntry!]!
}

type FactoringStatisticsEntry @entity {
  id: ID!
  timestamp: BigInt!
  fundBalance: BigInt!
  deployedCapital: BigInt!
  capitalAccount: BigInt!
}

type BullaManager @entity {
  id: ID!
  address: Bytes #address
  owner: Bytes #address
  description: String
  bullaToken: Token
  feeCollectionAddress: User
  feeBasisPoints: Int
  reducedFeeBasisPoints: Int
  bullaTokenThreshold: Int #the amount of tokens to get a reduced fee
  lastUpdatedBlockNumber: BigInt!
  lastUpdatedTimestamp: BigInt!
}

# 1 config object for each safe using bullaBanker
type BullaBankerGnosisModuleConfig @entity {
  id: ID! #GnosisSafe:SAFE_ADDRESS-ModuleConfig
  moduleAddress: Bytes! #address
  prevModuleAddress: Bytes #address
  safeAddress: Bytes! #address
  safe: User! #address
  version: String!
  installationTimestamp: BigInt!
}
